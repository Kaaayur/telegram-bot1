import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from google.oauth2 import service_account
import gspread
import config
import datetime

#  –î–ª—è webhook'–æ–≤ –Ω–∞ PythonAnywhere
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.TELEGRAM_TOKEN)
dp = Dispatcher()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
def setup_gspread():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets."""
    try:
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds = service_account.Credentials.from_service_account_file(
            config.GOOGLE_CREDENTIALS_FILE, scopes=scope
        )
        client = gspread.authorize(creds)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Google API")
        return client
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google API: {e}")
        print(f"   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {type(e).__name__}: {e}")
        return None

# ---- –ö–æ–º–∞–Ω–¥–∞ /start ----
@dp.message(Command("start"))
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if str(message.from_user.id) not in config.ANIMATOR_IDS:
        await message.answer("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–Ω–∏–º–∞—Ç–æ—Ä.")
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∞–Ω–∏–º–∞—Ç–æ—Ä–æ–≤.")


# ---- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----
@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    text = message.text.lower()
    user_id = str(message.from_user.id)
    chat_id = message.chat.id

    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥—Ä—É–ø–ø–µ {chat_id}: {text}")

    if chat_id != config.GROUP_CHAT_ID:
        print(f"‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø—ã (ID: {chat_id})")
        return

    if user_id not in config.ANIMATOR_IDS:
        print(f"‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        return

    for keyword in config.KEYWORDS:
        if keyword in text:
            timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            animator_name = config.ANIMATOR_IDS[user_id]
            await log_to_google_sheets(animator_name, keyword, timestamp)
            await message.reply(f"‚úÖ –°—Ç–∞—Ç—É—Å '{keyword}' –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {animator_name}.")
            break


# ---- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets ----
async def log_to_google_sheets(animator_name, status, timestamp):
    """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google —Ç–∞–±–ª–∏—Ü—É."""
    print(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∏–º–∞—Ç–æ—Ä–∞ {animator_name}, —Å—Ç–∞—Ç—É—Å: {status}, –≤—Ä–µ–º—è: {timestamp}")
    client = setup_gspread()
    if not client:
        return

    sheet = client.open_by_key(config.SPREADSHEET_KEY).sheet1
    date_str = timestamp.split()[0]

    try:
        date_cell = sheet.find(date_str, in_column=1)
        date_row = date_cell.row
    except Exception:
        date_row = None

    try:
        artist_col = sheet.find("–ê—Ä—Ç–∏—Å—Ç").col
        status_col = sheet.find("–°—Ç–∞—Ç—É—Å").col
        time_col = sheet.find("–í—Ä–µ–º—è").col
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ ('–ê—Ä—Ç–∏—Å—Ç', '–°—Ç–∞—Ç—É—Å', '–í—Ä–µ–º—è')")
        print(f"   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {type(e).__name__}: {e}")
        return

    if date_row is not None:
        empty_row = date_row + 1
        while True:
            if not sheet.cell(empty_row, artist_col).value and \
               not sheet.cell(empty_row, status_col).value and \
               not sheet.cell(empty_row, time_col).value:
                break
            empty_row += 1

    else:
        empty_row = 2
        while True:
            cell_value = sheet.cell(empty_row, 1).value
            if cell_value is None or cell_value == "":
                break
            empty_row += 1
        sheet.insert_row([date_str], empty_row)
        empty_row += 1
        sheet.insert_row([], empty_row)

    try:
        sheet.update_cell(empty_row, artist_col, animator_name)
        sheet.update_cell(empty_row, status_col, status)
        sheet.update_cell(empty_row, time_col, timestamp.split(" ")[1])
        logger.info(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {animator_name}, {status}, {timestamp}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É.")
        print(f"   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {type(e).__name__}: {e}")


# ---- Webhook setup (aiohttp) ----

async def on_startup(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω—É–∂–Ω–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞)."""
    webhook_url = f"https://{config.PA_USERNAME}.pythonanywhere.com/webhook"
    await bot.set_webhook(webhook_url)
    print(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {webhook_url}")


async def on_shutdown(app):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    await bot.delete_webhook()
    print("‚úÖ Webhook —É–¥–∞–ª—ë–Ω.")
    await dp.storage.close()

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞."""
    update = types.Update(**await request.json())
    await dp.process_update(update)
    return web.Response(text="OK")

# ---- PythonAnywhere-specific setup ----

def main():

    app = web.Application()
    app.router.add_post('/webhook', handle_webhook)

    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)

    return app